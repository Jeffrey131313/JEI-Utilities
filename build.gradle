import net.minecraftforge.accesstransformer.AccessTransformerEngine
import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.Opcodes
import org.objectweb.asm.Type
import org.objectweb.asm.tree.ClassNode

import java.nio.file.FileSystem
import java.nio.file.FileSystems
import java.nio.file.Files
import java.util.stream.StreamSupport

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.ow2.asm:asm-tree:9.2'
        classpath 'net.minecraftforge:accesstransformers:8.+'
    }
}

plugins {
    id 'eclipse'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = mod_group
archivesBaseName = "JEI-Utilities" + '-' + minecraft_version

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: "${channel_mapping}", version: "${version_mapping}"

    accessTransformer = file(access_transformer)

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'jeiutilities'

            mods {
                jeiutilities {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'jeiutilities'

            mods {
                jeiutilities {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'jeiutilities'

            mods {
                jeiutilities {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'jeiutilities', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                jeiutilities {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

}

configurations {
    accessMod
    compileOnly.extendsFrom accessMod
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'

    //TODO:Move all mixin accessor to access transformer
//    accessMod fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

}

mixin {
    add sourceSets.main, "jeiutilities.refmap.json"

    config "jeiutilities.mixins.json"

    debug.export = true
    mixin.hotSwap = true
    mixin.checks.interfaces=true
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "JEI Utilities",
                "Specification-Vendor"    : "vfyjxf_",
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "vfyjxf_",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

/*
afterEvaluate {
    //Transform mod jar for compile,because access transformer only works on minecraft class, we need to transform mod class by ourself.
    File atFile = file(access_transformer)
    if (atFile.exists()) {
        project.getLogger().info("Loading Mod Accessor file : {}", atFile.getPath())
        AccessTransformerEngine.INSTANCE.addResource(atFile.toPath(),atFile.getName())
        configurations.accessMod.forEach { dep -> {
            //Copied from net.minecraftforge.accesstransformer.TransformerProcessor
                URI toUri = dep.toURI()
                URI outJarURI = URI.create("jar:"+toUri.toASCIIString())
                try (FileSystem outJar = FileSystems.newFileSystem(outJarURI, new HashMap<String, String>() {{
                    put("create", "true")
                }})) {
                    try (FileSystem jarFile = FileSystems.newFileSystem(dep.toPath(), ClassLoader.getSystemClassLoader())) {
                        Files.walk(StreamSupport.stream(jarFile.getRootDirectories().spliterator(), false).findFirst().orElseThrow(() -> new IllegalArgumentException("The JAR has no root?!")))
                                .forEach(path -> {
                                    java.nio.file.Path outPath = outJar.getPath(path.toAbsolutePath().toString())
                                    if (path.getNameCount() > 0 && String.valueOf(path.getFileName()).endsWith(".class")) {
                                        try (InputStream is = Files.newInputStream(path)) {
                                            final ClassReader classReader = new ClassReader(is)
                                            final ClassNode cn = new ClassNode()
                                            classReader.accept(cn, 0)
                                            final Type type = Type.getType('L'+cn.name.replaceAll("\\.","/")+';')
                                            if (AccessTransformerEngine.INSTANCE.handlesClass(type)) {
                                                project.getLogger().debug("Transforming class {}", type)
                                                AccessTransformerEngine.INSTANCE.transform(cn, type)
                                                ClassWriter cw = new ClassWriter(Opcodes.ASM5)
                                                cn.accept(cw)
                                                Files.write(outPath, cw.toByteArray())
                                            } else {
                                                project.getLogger().debug("Skipping {}", type)
                                                Files.copy(path, outPath);
                                            }
                                        } catch (IOException e) {
                                            project.getLogger().error("Reading {}", path, e)
                                        }
                                    } else if (!Files.exists(outPath)){
                                        try {
                                            Files.copy(path, outPath)
                                        } catch (IOException e) {
                                            project.getLogger().error("Copying {}", path, e)
                                        }
                                    }
                                });
                    } catch (IOException e) {
                        project.getLogger().error("Reading JAR", e)
                    }
                } catch (IOException e) {
                    project.getLogger().error("Writing JAR", e)
                }
            }
        }
    }else if (!configurations.accessMod.files.isEmpty()){
        project.getLogger().warn("Mod accessor file does not exist, you need to create an accessor file.")
    }
}

 */
